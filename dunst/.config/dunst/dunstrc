# vim: filetype=dosini
[global]
font = Comic Code Ligatures 8

# The format of the message. Possible variables are:
#   %a  appname
#   %s  summary
#   %b  body
#   %i  iconname (including its path)
#   %I  iconname (without its path)
#   %p  progress value if set ([  0%] to [100%]) or nothing
# Markup is allowed
format = "<b>%s</b>\n%b\n<i>%a</i>"

# Sort messages by urgency
sort = yes

# Show how many messages are currently hidden (because of geometry)
indicate_hidden = yes

# Alignment of message text.
# Possible values are "left", "center" and "right"
alignment = center

# show age of message if message is older than show_age_threshold seconds.
# set to -1 to disable
show_age_threshold = 10

# split notifications into multiple lines if they don't fit into geometry
word_wrap = yes

# ignore newlines '\n' in notifications
ignore_newline = no

# The geometry of the message window.
# geometry [{width}]x{height}][+/-{x}+/-{y}]
# The height is measured in number of notifications everything else in pixels. If the width
# is omitted but the height is given ("-geometry x2"), the message window
# expands over the whole screen (dmenu-like). If width is 0,
# the window expands to the longest message displayed.
# A positive x is measured from the left, a negative from the
# right side of the screen.  Y is measured from the top and down respectevly.
# The width can be negative. In this case the actual width is the
# screen width minus the width defined in within the geometry option.
#geometry = "300x8-10-10"

# The origin of the notification window on the screen.
# It can then be moved with offset.
# Origin can be one of: 
# top-left top-center top-right bottom-left bottom-center bottom-right left-center center right-gcenter
origin = bottom-right

# Respectively the horizontal and vertical offset in pixels from the corner of the screen specified by origin.
# Both values should always be positive or zero.
# Examples: origin = top-right offset = 10x300 # a margin of 10 pixels from the right and 300 pixels from the top
offset = 10x10

# The maximum height of a single notification.
height = 200

# The width of the notification window in pixels.
# This can be a single number to specify a constant width or two numbers for the minimum and maximum width.
# The notification will expand from the minimum width as neccesary.
# Examples: width = 300 # constant width of 300 width = (0, 300) # width between 0 and 300
width = 300

# The number of notifications that can appear at one time.
# When this limit is reached any additional notifications will be queued and displayed when the currently
# displayed ones either time out or are manually dismissed.
# The value 0 means no limit.
# If indicate_hidden is true, then the specified limit is reduced by 1 and the last notification is a message
# informing how many hidden notifications are waiting to be displayed.
# See the indicate_hidden entry for more information.
notification_limit = 8

# The transparency of the window. range: [0; 100]
# This option will only work if a compositing windowmanager is present (e.g. xcompmgr, compiz, etc..)
transparency = 10

# Don't remove messages, if the user is idle (no mouse or keyboard input)
# for longer than idle_threshold seconds.
# Set to 0 to disable.
idle_threshold = 120

# Which monitor should the notifications be displayed on.
monitor = 0

# Display notification on focused monitor. Possible modes are:
# mouse: follow mouse pointer
# keyboard: follow window with keyboard focus
# none: don't follow anything
#
# "keyboard" needs a windowmanager that exports the _NET_ACTIVE_WINDOW property.
# This should be the case for almost all modern windowmanagers.
#
# If this option is set to mouse or keyboard, the monitor option will be
# ignored.
follow = mouse

# should a notification popped up from history be sticky or
# timeout as if it would normally do.
sticky_history = yes

# The height of a single line. If the height is smaller than the font height,
# it will get raised to the font height.
# This adds empty space above and under the text.
line_height = 0

# Draw a line of 'separatpr_height' pixel height between two notifications.
# Set to 0 to disable
separator_height = 2

# padding between text and separator
padding = 8

# horizontal padding
horizontal_padding = 8

# Define a color for the separator.
# possible values are:
#  * auto: dunst tries to find a color fitting to the background
#  * foreground: use the same color as the foreground
#  * frame: use the same color as the frame.
#  * anything else will be interpreted as a X color
separator_color = frame

max_icon_size = 80

# icon search path
icon_path = "/usr/share/icons/Adwaita/scalable/status/:/usr/share/icons/Adwaita/scalable/devices/:/usr/share/icons/Adwaita/32x32/legacy/:/usr/share/icons/Adwaita/32x32/mimetypes/"

# Icon theme
icon_theme = "Tela-circle-dark,breeze,Papirus,Adwaita"

enable_recursive_icon_lookup = true

# Radius
corner_radius=5

# Defines action of mouse click. A touch input in Wayland acts as a mouse left click.
# A list of values, separated by commas, can be specified for multiple
# actions to be executed in sequence.
mouse_left_click="close_current"
mouse_middle_click="do_action, close_current"
mouse_right_click="close_all"

# dmenu path
dmenu = /usr/bin/dmenu -p dunst:

# browser for opening urls in context menu
; browser = /usr/bin/firefox -new-tab

# show actions indicators
show_indicators = true

# Defines width in pixels of frame around the notification window.
# Set to 0 to disable.
frame_width = 1

# Defines color of the frame around the notification window.
frame_color = "#596bfd"

progress_bar_height = 20
progress_bar_corner_radius = 5

[urgency_low]
# IMPORTANT: colors have to be defined in quotation marks.
# Otherwise the '#' and following  would be interpreted as a comment.
  background = "#090c1b"
  foreground = "#bbbbbb"
  timeout = 3

[urgency_normal]
  background = "#090c1b"
  foreground = "#bbbbbb"
  timeout = 5

[urgency_critical]
  background = "#83002e"
  foreground = "#bbbbbb"
  timeout = 0


# Every section that isn't one of the above is interpreted as a rules
# to override settings for certain messages.
# Messages can be matched by 'appname', 'summary', 'body' or 'icon'
# and you can override the 'timeout', 'urgency', 'foreground', 'background'
# and 'format'.
# Shell-like globbing will get expanded.
#
# SCRIPTING
# you can specify a script that gets run when the rule matches by setting
# the 'script' option.
# The script will be called as follows:
# script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: if you don't want a notification to be displayed, set the format to ""
# NOTE: It might be helpful to run dunst -print in a terminal in order to find
# fitting options for rules.

[sound]
  summary = "*"
  script = /home/krivah/.local/bin/notification.sh

[music]
  appname = "MPD"
  alignment = left
  format = "%b"
  history_ignore = yes

[volume]
# Match criteria
  category="volume"
  alignment = center
  format = <b>%a</b>
  icon_position = top
  history_ignore = yes
  fullscreen = show
  hide_text = true
  timeout = 2

[brightness]
  appname="Brightness"
  format = "%b %p"
  timeout = 1

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
## This notification will not be displayed
#    summary = "foobar"
#    format = ""

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#


